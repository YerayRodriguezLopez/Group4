@page
@model RazorPage.Pages.MapPageModel
@{
    ViewData["Title"] = "Map"; // Sets the page title
}

<html>
<head>
    <title>Map with markers</title>
    <meta charset="utf-8" />
    <style>
        /* Styles for map and layout */
        #map {
            height: 500px;
            width: 100%;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f4f8;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .container {
            width: 80%;
            margin: auto;
            overflow: hidden;
            flex: 1;
        }

        header {
            background-color: #333;
            color: white;
            padding: 20px 0;
            text-align: center;
        }
    </style>
</head>

<body>
    <!-- Main content area -->
    <main class="container">
        <h3>Maps with the companies</h3>
        <p>Click on the markers to go see the details!!</p>
        <div id="map"></div>

        <!-- Chart section: displaying company stats visually -->
        <div class="container mt-4">
            <h2 class="mb-4">Stores by Type (Retail or Provider)</h2>
            <div class="row">
                <!-- Provider pie chart -->
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header"><h5>Provider</h5></div>
                        <div class="card-body">
                            <canvas id="providerChart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Retail pie chart -->
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header"><h5>Retail</h5></div>
                        <div class="card-body">
                            <canvas id="retailChart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Combined bar chart -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header"><h5>Combination of attributes</h5></div>
                        <div class="card-body">
                            <canvas id="combinedChart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Summary statistics -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header"><h5>Statistical summary</h5></div>
                        <div class="card-body">
                            <div class="row text-center">
                                <div class="col-md-3">
                                    <h4 class="text-primary">@Model.TotalCompanies</h4>
                                    <p>Total Stores</p>
                                </div>
                                <div class="col-md-3">
                                    <h4 class="text-success">@Model.ProvidersCount</h4>
                                    <p>Providers</p>
                                </div>
                                <div class="col-md-3">
                                    <h4 class="text-info">@Model.RetailCount</h4>
                                    <p>Retails</p>
                                </div>
                                <div class="col-md-3">
                                    <h4 class="text-warning">@Model.BothCount</h4>
                                    <p>Both</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Chart.js: pie and bar charts for store types -->
    @section Scripts {
            <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
            <script>
                // Doughnut chart for Providers
                const providerCtx = document.getElementById('providerChart').getContext('2d');
                new Chart(providerCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Is provider', 'Is not provider'],
                        datasets: [{
                            data: [@Model.ProvidersCount, @Model.NonProvidersCount],
                            backgroundColor: ['#28a745', '#dc3545'],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: { legend: { position: 'bottom' } }
                    }
                });

                // Doughnut chart for Retails
                const retailCtx = document.getElementById('retailChart').getContext('2d');
                new Chart(retailCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Is Retail', 'Is not Retail'],
                        datasets: [{
                            data: [@Model.RetailCount, @Model.NonRetailCount],
                            backgroundColor: ['#17a2b8', '#ffc107'],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: { legend: { position: 'bottom' } }
                    }
                });

                // Bar chart for combinations of attributes
                const combinedCtx = document.getElementById('combinedChart').getContext('2d');
                new Chart(combinedCtx, {
                    type: 'bar',
                    data: {
                        labels: ['Only Provider', 'Only Retail', 'Both', 'None'],
                        datasets: [{
                            label: 'Number of Stores',
                            data: [@Model.OnlyProviderCount, @Model.OnlyRetailCount, @Model.BothCount, @Model.NeitherCount],
                            backgroundColor: ['#28a745', '#17a2b8', '#fd7e14', '#6c757d'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { stepSize: 1 }
                            }
                        },
                        plugins: { legend: { display: false } }
                    }
                });
            </script>
    }

    <!-- Google Maps setup and marker placement -->
    <script>
        async function initMap() {
            console.log("Initializing map...");
            const { Map } = await google.maps.importLibrary("maps");
            const { Marker } = await google.maps.importLibrary("marker");

            // Set default center: Barcelona
            const ubicacion = { lat: 41.3818, lng: 2.1685 };

            // Create map instance
            const mapa = new Map(document.getElementById("map"), {
                zoom: 12,
                center: ubicacion,
                mapId: "DEMO_MAP_ID",
            });

        @if (Model.Addresses != null && Model.Addresses.Any())
        {
            <text>
                        const direccionesJson = @Html.Raw(Json.Serialize(
                        Model.Addresses.Select(a => new
                        {
                            lat = (double)a.Lat,
                            lng = (double)a.Lng,
                            location = a.Location,
                            companyId = a.CompanyId
                        })
                    ));
                        const direcciones = direccionesJson;

                        // Create markers for each company address
                        direcciones.forEach(function(direccion) {
                            const marcador = new Marker({
                                position: { lat: direccion.lat, lng: direccion.lng },
                                map: mapa,
                                title: "Direction: " + direccion.location
                            });

                            // Click listener to navigate to company detail
                            marcador.addListener('click', function() {
                                window.open(`/DetailCompany?id=${direccion.companyId}`, '_self');
                            });
                        });
            </text>
        }
        else
        {
            <text>
                        // Default fallback marker in Barcelona
                        const marcadorEjemplo = new Marker({
                            position: ubicacion,
                            map: mapa,
                            title: "Barcelona - No data"
                        });
            </text>
        }
        }
    </script>

    <!-- Load Google Maps API dynamically -->
    <script>
        (g => {
            var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__",
            m = document, b = window;
            b = b[c] || (b[c] = {});
            var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (
                h = new Promise(async (f, n) => {
                    a = m.createElement("script");
                    e.set("libraries", [...r] + "");
                    for (k in g)
                        e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]);
                    e.set("callback", c + ".maps." + q);
                    a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
                    d[q] = f;
                    a.onerror = () => h = n(Error(p + " could not load."));
                    a.nonce = m.querySelector("script[nonce]")?.nonce || "";
                    m.head.append(a);
                })
            );
            d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n));
        })({
            key: "AIzaSyAEFByuNPdNP8BxEX_pwZAeNma8nycfSPk", // API key
            v: "weekly",
        });

        // Run map init after API is ready
        google.maps.importLibrary("maps").then(() => {
            initMap();
        });
    </script>
</body>
</html>
