@page
@model RazorPage.Pages.MapPageModel
@{
    ViewData["Title"] = "Map";
}
<html>
  <head>
    <title>Map with markers</title>
    <meta charset="utf-8" />
   <style>
  #map {
    height: 500px;
    width: 100%;
  }

  body {
    font-family: Arial, sans-serif;
    background-color: #f0f4f8;
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .container {
    width: 80%;
    margin: auto;
    overflow: hidden;
    flex: 1;
  }

  header {
    background-color: #333;
    color: white;
    padding: 20px 0;
    text-align: center;
  }
</style>
</head>
  <body>
      <main class="container">
    <h3>Maps with the companies</h3>
    <p>Click on the markers to go see the details!!</p>
    <div id="map"></div>
    <div class="container mt-4">
    <h2 class="mb-4">Stores by Type (Retail or Provider)</h2>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Provider</h5>
                </div>
                <div class="card-body">
                    <canvas id="providerChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Retail</h5>
                </div>
                <div class="card-body">
                    <canvas id="retailChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Combination of atributes</h5>
                </div>
                <div class="card-body">
                    <canvas id="combinedChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Stadistic summary</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-primary">@Model.TotalCompanies</h4>
                                <p>Total Stores</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-success">@Model.ProvidersCount</h4>
                                <p>Providers</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-info">@Model.RetailCount</h4>
                                <p>Retails</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-warning">@Model.BothCount</h4>
                                <p>Both</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</main>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
        <script>
            // Gráfico IsProvider
            const providerCtx = document.getElementById('providerChart').getContext('2d');
            new Chart(providerCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Is provider', 'Is not provider'],
                    datasets: [{
                        data: [@Model.ProvidersCount, @Model.NonProvidersCount],
                        backgroundColor: ['#28a745', '#dc3545'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Gráfico IsRetail
            const retailCtx = document.getElementById('retailChart').getContext('2d');
            new Chart(retailCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Is Retail', 'Is not Retail'],
                    datasets: [{
                        data: [@Model.RetailCount, @Model.NonRetailCount],
                        backgroundColor: ['#17a2b8', '#ffc107'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Gráfico Combinado
            const combinedCtx = document.getElementById('combinedChart').getContext('2d');
            new Chart(combinedCtx, {
                type: 'bar',
                data: {
                    labels: ['Only Provider', 'Only Retail', 'Both', 'None'],
                    datasets: [{
                        label: 'Número de Tiendas',
                        data: [@Model.OnlyProviderCount, @Model.OnlyRetailCount, @Model.BothCount, @Model.NeitherCount],
                        backgroundColor: ['#28a745', '#17a2b8', '#fd7e14', '#6c757d'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        </script>
    }
    <script>
      // Function that starts the map using new Google Maps API
      async function initMap() {
        console.log("Iniciando mapa con nueva API...");
        // Request needed libraries
        const { Map } = await google.maps.importLibrary("maps");
        const { Marker } = await google.maps.importLibrary("marker");
        // Coords Barcelona
        const ubicacion = { lat: 41.3818, lng: 2.1685 };
        // Create mapa
        const mapa = new Map(document.getElementById("map"), {
          zoom: 12,
          center: ubicacion,
          mapId: "DEMO_MAP_ID", // Required for API
        });
        console.log("Mapa creado exitosamente");
        @if (Model.Addresses != null && Model.Addresses.Any())
        {
            <text>
                          // Usar Html.Raw con JsonSerializer y escapar correctamente
                          const direccionesJson = @Html.Raw(Json.Serialize(Model.Addresses.Select(a => new { lat = (double)a.Lat, lng = (double)a.Lng, location = a.Location, companyId = a.CompanyId })));
                          const direcciones = direccionesJson;
                          console.log("Direcciones cargadas:", direcciones);
                          // Recorrer las direcciones y crear marcadores
                          direcciones.forEach(function(direccion) {
                            console.log("Creando marcador para:", direccion.location);
                            const marcador = new Marker({
                              position: { lat: direccion.lat, lng: direccion.lng },
                              map: mapa,
                              title: "Direction: " + direccion.location
                            });

                            // Agregar click listener para abrir Google Maps
                            marcador.addListener('click', function() {
                            // Crear URL para Google Maps con las coordenadas
                            window.open(`/DetailCompany?id=${direccion.companyId}`, '_self');
                                });
                          });
                          console.log("Todos los marcadores creados");
            </text>
        }
        else
        {
            <text>
                          console.log("No hay direcciones para mostrar");
                          // Crear un marcador de ejemplo en Barcelona
                          const marcadorEjemplo = new Marker({
                            position: ubicacion,
                            map: mapa,
                            title: "Barcelona - Sin datos"
                          });
            </text>
        }
      }
    </script>
    <!-- Load API of Google Maps -->
    <script>
      (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
        key: "AIzaSyAEFByuNPdNP8BxEX_pwZAeNma8nycfSPk", // API
        v: "weekly",
      });
      // Initialize the map after the API loads
      google.maps.importLibrary("maps").then(() => {
        initMap();
      });
    </script>
  </body>
</html>